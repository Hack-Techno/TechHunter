import socket
import ssl
import whois
import dns.resolver
import requests
from ipwhois import IPWhois

def get_domain_info(domain):
    """Fetch WHOIS information of the domain."""
    try:
        w = whois.whois(domain)
        return w
    except Exception as e:
        return f"WHOIS lookup failed: {e}"

def get_ip_addresses(domain):
    """Fetch IPv4 and IPv6 addresses of the domain."""
    try:
        ipv4 = socket.gethostbyname(domain)
        ipv6 = None
        try:
            ipv6 = socket.getaddrinfo(domain, None, socket.AF_INET6)
        except socket.gaierror:
            pass
        return ipv4, ipv6
    except Exception as e:
        return f"IP lookup failed: {e}", None

def get_dns_records(domain):
    """Fetch DNS records of the domain."""
    records = {}
    try:
        for record_type in ['A', 'AAAA', 'MX', 'NS', 'TXT', 'CNAME']:
            try:
                answers = dns.resolver.resolve(domain, record_type)
                records[record_type] = [r.to_text() for r in answers]
            except dns.resolver.NoAnswer:
                records[record_type] = []
            except Exception as e:
                records[record_type] = f"Error: {e}"
    except Exception as e:
        return f"DNS lookup failed: {e}"
    return records

def get_ssl_cert(domain):
    """Fetch SSL certificate details of the domain."""
    try:
        ctx = ssl.create_default_context()
        with socket.create_connection((domain, 443)) as sock:
            with ctx.wrap_socket(sock, server_hostname=domain) as ssock:
                cert = ssock.getpeercert()
                return cert
    except Exception as e:
        return f"SSL lookup failed: {e}"

def get_open_ports(domain, ports):
    """Check open ports for the domain."""
    open_ports = []
    for port in ports:
        try:
            with socket.create_connection((domain, port), timeout=2):
                open_ports.append(port)
        except (socket.timeout, ConnectionRefusedError):
            pass
        except Exception as e:
            return f"Port scan failed: {e}"
    return open_ports

def get_ip_whois(ip):
    """Fetch WHOIS information for an IP address."""
    try:
        ip_info = IPWhois(ip)
        return ip_info.lookup_rdap()
    except Exception as e:
        return f"IP WHOIS lookup failed: {e}"

def main():
    domain = input("Enter the domain name: ").strip()
    
    print("\n[+] Fetching WHOIS information...")
    whois_info = get_domain_info(domain)
    print(whois_info)

    print("\n[+] Fetching IP addresses...")
    ipv4, ipv6 = get_ip_addresses(domain)
    print(f"IPv4: {ipv4}")
    print(f"IPv6: {ipv6}")

    print("\n[+] Fetching DNS records...")
    dns_records = get_dns_records(domain)
    for record_type, records in dns_records.items():
        print(f"{record_type}: {records}")

    print("\n[+] Fetching SSL certificate information...")
    ssl_cert = get_ssl_cert(domain)
    print(ssl_cert)

    print("\n[+] Scanning common open ports...")
    common_ports = [80, 443, 21, 22, 25, 110, 143, 3306, 8080]
    open_ports = get_open_ports(domain, common_ports)
    print(f"Open ports: {open_ports}")

    print("\n[+] Fetching IP WHOIS information...")
    if ipv4 and isinstance(ipv4, str):
        ip_whois_info = get_ip_whois(ipv4)
        print(ip_whois_info)

if __name__ == "__main__":
    main()
